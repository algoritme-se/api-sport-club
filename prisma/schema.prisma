// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum StudentStatus {
  PENDING
  TRIAL
  PAID
}

model User {
  id        String   @id @default(uuid())
  name      String
  photo_url String?
  email     String   @unique
  password  String
  role      UserRole @default(STUDENT)
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  student   Student? @relation(fields: [studentId], references: [id])
  admin     Admin?   @relation(fields: [admin_id], references: [id])
  teacherId String?
  studentId String?
  admin_id  String?

  @@map("users")
}

model Student {
  id                String          @id @default(uuid())
  modality          Modality[]
  modality_level    modality_level? @relation(fields: [modality_level_id], references: [id])
  modality_level_id String?
  plan              Plan?           @relation(fields: [plan_id], references: [id])
  plan_id           String?
  appointments      Appointment[]
  status            StudentStatus   @default(PENDING)
  User              User[]

  @@map("students")
}

model Teacher {
  id         String     @id @default(uuid())
  name       String     @unique
  photo_url  String?
  modalities Modality[]
  Class      Class[]
  user_id    String     @unique
  User       User[]

  @@map("teachers")
}

model Admin {
  id      String @id @default(uuid())
  user_id String
  User    User[]

  @@map("admin_profiles")
}

model Modality {
  id          String    @id @default(uuid())
  name        String
  description String
  students    Student[]
  teachers    Teacher[]
  class       Class[]

  @@map("modalities")
}

model modality_level {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  Student     Student[]

  @@map("modality_levels")
}

model Plan {
  id                        String    @id @default(uuid())
  name                      String    @unique
  price                     Float
  description               String
  student                   Student[]
  allowed_modalities_number Int

  @@map("plans")
}

model ClubUnit {
  id          String  @id @default(uuid())
  name        String  @unique
  address     String
  description String
  Class       Class[]
  latitude    Decimal
  longitude   Decimal

  @@map("club_units")
}

model Class {
  id               String        @id @default(uuid())
  modality         Modality      @relation(fields: [modality_id], references: [id])
  modality_id      String
  teacher          Teacher       @relation(fields: [teacherId], references: [id])
  teacherId        String
  date             DateTime
  maximum_students Int
  unity            ClubUnit      @relation(fields: [club_unit_id], references: [id])
  club_unit_id     String
  students_booked  Int
  Appointment      Appointment[]

  @@map("classes")
}

model Appointment {
  id        String   @id @default(uuid())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  class     Class    @relation(fields: [class_id], references: [id])
  class_id  String
  create_ad DateTime @default(now())

  @@map("appointments")
}
